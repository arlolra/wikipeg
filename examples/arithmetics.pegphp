{
  private function combine($first, $rest, $combiners) {
    $result = $first;

    for ($i = 0; $i < count($rest); $i++) {
      $result = $combiners[$rest[$i][1]]($result, $rest[$i][3]);
    }

    return $result;
  }
}

Expression
  = first:Term rest:(_ ("+" / "-") _ Term)* {
      return $this->combine($first, $rest, [
        "+" => function($left, $right) { return $left + $right; },
        "-" => function($left, $right) { return $left - $right; }
      ]);
    }

Term
  = first:Factor rest:(_ ("*" / "/") _ Factor)* {
      return $this->combine($first, $rest, [
        "*" => function($left, $right) { return $left * $right; },
        "/" => function($left, $right) { return $left / $right; }
      ]);
    }

Factor
  = "(" _ expr:Expression _ ")" { return $expr; }
  / Integer

Integer "integer"
  = [0-9]+ { return intval($this->text()); }

_ "whitespace"
  = [ \t\n\r]*
